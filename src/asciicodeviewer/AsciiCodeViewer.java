/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package asciicodeviewer;

import java.awt.Color;
import java.awt.Component;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pc
 */
public class AsciiCodeViewer extends javax.swing.JFrame {

    private static final String PADDINGCHAR = " ";
    public static final char SIXTYTWO = '{';
    public static final char SIXTYTHREE = '}';
    private static final String[] ASCII_CONTROL_PART1_NAMES = {"NUL", "SOH", "STX", "ETX", "EOT", "ENQ", "ACK", "BEL", "BS", "HT", "LF", "VT", "FF", "CR", "SO", "SI", "DLE", "DC1", "DC2", "DC3", "DC4", "NAK", "SYN", "ETB", "CAN", "EM", "SUB", "ESC", "FS", "GS", "RS", "US"};
    private static final String[] ASCII_CONTROL_PART2_NAMES = {"DEL"};

    private static char[] numerics;
    private static char[] uppers;
    private static char[] lowers;
    private static char[] alphabetics;
    private static char[] alphanumerics;
    private static char[] asciiPrintables;
    private static char[] specialChars;
    private static char[] sixtyfours;

    private static String[] asciiTable;

    /**
     * Creates new form AsciiCodeViewer
     */
    public AsciiCodeViewer() {
        initComponents();
        
        init();
    }
    
    private void init() {
        setCharsValues();
        
        jTableAscii.setDragEnabled(true);
        ((DefaultTableModel) jTableAscii.getModel()).setRowCount(31);        
        ((DefaultTableModel) jTableAscii.getModel()).setColumnCount(8)
                ;
        String[] codes = getAsciiTable();
        int noColumn;
        int codeColumn;
        int row;
        ((DefaultTableModel) jTableAscii.getModel()).setRowCount(32);
        AsciiTableCellRenderer renderer = new AsciiTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);
        jTableAscii.setDefaultRenderer(String.class, renderer);
        ((DefaultTableCellRenderer) jTableAscii.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
        jTableAscii.setDragEnabled(true);
        for (int i = 0; i < codes.length; i++) {
            noColumn = (i / 32) * 2;
            codeColumn = noColumn + 1;
            row = i % 32;
            jTableAscii.setValueAt(i, row, noColumn);
            jTableAscii.setValueAt(codes[i], row, codeColumn);
        }
        jTableAscii.validate();
        setSize(600, 610);
        validate();
    }
    

    class AsciiTableCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if (column % 2 == 0) {
                if (row % 8 < 4) {
                    c.setBackground(Color.PINK);
                } else {
                    c.setBackground(Color.GREEN);
                }
            } else if (row % 8 < 4) {
                c.setBackground(Color.GREEN);
            } else {
                c.setBackground(Color.PINK);
            }
            return c;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanelAscii = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jRadioButtonAsciiDecimal = new javax.swing.JRadioButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jRadioButtonAsciiBinary = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jRadioButtonHexaDecimal = new javax.swing.JRadioButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableAscii = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ASCII 코드 뷰어");

        jPanelAscii.setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        buttonGroup1.add(jRadioButtonAsciiDecimal);
        jRadioButtonAsciiDecimal.setSelected(true);
        jRadioButtonAsciiDecimal.setText("십진");
        jRadioButtonAsciiDecimal.setFocusable(false);
        jRadioButtonAsciiDecimal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jRadioButtonAsciiDecimal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAsciiDecimalItemStateChanged(evt);
            }
        });
        jToolBar1.add(jRadioButtonAsciiDecimal);
        jToolBar1.add(jSeparator4);

        buttonGroup1.add(jRadioButtonAsciiBinary);
        jRadioButtonAsciiBinary.setFocusable(false);
        jRadioButtonAsciiBinary.setLabel("이진");
        jRadioButtonAsciiBinary.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jRadioButtonAsciiBinary.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAsciiBinaryItemStateChanged(evt);
            }
        });
        jToolBar1.add(jRadioButtonAsciiBinary);
        jToolBar1.add(jSeparator1);

        buttonGroup1.add(jRadioButtonHexaDecimal);
        jRadioButtonHexaDecimal.setText("십육진");
        jRadioButtonHexaDecimal.setFocusable(false);
        jRadioButtonHexaDecimal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jRadioButtonHexaDecimal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonHexaDecimalItemStateChanged(evt);
            }
        });
        jToolBar1.add(jRadioButtonHexaDecimal);

        jPanelAscii.add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jTableAscii.setFont(new java.awt.Font("굴림", 1, 15)); // NOI18N
        jTableAscii.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Code", "No", "Code", "No", "Code", "No", "Code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAscii.setCellSelectionEnabled(true);
        jScrollPane4.setViewportView(jTableAscii);

        jPanelAscii.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanelAscii, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButtonAsciiDecimalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAsciiDecimalItemStateChanged
        transAsciiNoValue();
    }//GEN-LAST:event_jRadioButtonAsciiDecimalItemStateChanged

    private void jRadioButtonAsciiBinaryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAsciiBinaryItemStateChanged
        transAsciiNoValue();
    }//GEN-LAST:event_jRadioButtonAsciiBinaryItemStateChanged

    private void jRadioButtonHexaDecimalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonHexaDecimalItemStateChanged
        transAsciiNoValue();
    }//GEN-LAST:event_jRadioButtonHexaDecimalItemStateChanged

    private void transAsciiNoValue() {
        String[] codes = getAsciiTable();
        int noColumn;
        int row;
        int noStyle;
        if (jRadioButtonAsciiDecimal.isSelected()) {
            noStyle = 0;
        } else if (jRadioButtonAsciiBinary.isSelected()) {
            noStyle = 1;
        } else {
            noStyle = 2;
        }
        for (int i = 0; i < codes.length; i++) {
            noColumn = (i / 32) * 2;
            row = i % 32;
            String value;
            switch (noStyle) {
                case 0:
                    value = String.valueOf(i);
                    break;
                case 1:
                    value = paddingLeft(Integer.toBinaryString(i), "0", 7);
                    value = value.substring(0, 3) + " " + value.substring(3);
                    break;
                default:
                    value = Integer.toHexString(i);
                    break;
            }
            jTableAscii.setValueAt(value, row, noColumn);
        }
        jTableAscii.validate();
    }

    public static String paddingLeft(String value, int length) {
        return paddingLeft(value, PADDINGCHAR, length);
    }

    public static String paddingLeft(String value, String paddingCharacters, int length) {
        if (length < 0) {
            return value;
        }
        if (length == 0) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        if (value == null) {
            for (int i = 0; i < length; i += paddingCharacters.length()) {
                if (sb.length() + paddingCharacters.length() > length) {
                    break;
                }
                sb.append(paddingCharacters);
            }
            if (length == sb.length()) {
                return sb.toString();
            } else if (length < sb.length()) {
                return sb.substring(sb.length() - length);
            } else {
                sb.append(paddingCharacters.substring(0, length - sb.length()));
                return sb.toString();
            }
        }

        if (value.length() == length) {
            return value;
        }
        if (value.length() > length) {
            return value.substring(value.length() - length);
        }

        int offset = length - value.length();
        if (offset >= paddingCharacters.length()) {
            for (int i = 0; i < offset; i += paddingCharacters.length()) {
                if (sb.length() + paddingCharacters.length() > offset) {
                    break;
                }
                sb.append(paddingCharacters);
            }
        }
        if (sb.length() < offset) {
            sb.append(paddingCharacters.substring(0, offset - sb.length()));
        }

        sb.append(value);

        return sb.toString();
    }

    /**
     * @return the asciiTable
     */
    public static String[] getAsciiTable() {
        if (numerics == null) {
            setCharsValues();
        }
        return asciiTable;
    }

    private static void setCharsValues() {
        numerics = new char[10];
        for (int i = 0; i < numerics.length; i++) {
            numerics[i] = (char) (48 + i);
        }

        uppers = new char[26];
        for (int i = 0; i < uppers.length; i++) {
            uppers[i] = (char) (65 + i);
        }

        lowers = new char[26];
        for (int i = 0; i < lowers.length; i++) {
            lowers[i] = (char) (97 + i);
        }

        alphabetics = new char[52];
        System.arraycopy(uppers, 0, alphabetics, 0, uppers.length);
        System.arraycopy(lowers, 0, alphabetics, uppers.length, lowers.length);

        alphanumerics = new char[62];
        System.arraycopy(numerics, 0, alphanumerics, 0, numerics.length);
        System.arraycopy(alphabetics, 0, alphanumerics, numerics.length, alphabetics.length);

        asciiPrintables = new char[95];
        for (int i = 0; i < asciiPrintables.length; i++) {
            asciiPrintables[i] = (char) (32 + i);
        }
        int offset1 = 47 - 32 + 1;
        int offset2 = offset1 + 64 - 58 + 1;
        int offset3 = offset2 + 96 - 91 + 1;
        int offset4 = offset3 + 126 - 123 + 1;
        specialChars = new char[(47 - 32 + 1) + (64 - 58 + 1) + (96 - 91 + 1) + (126 - 123 + 1)];
        for (int i = 0; i < (47 - 32 + 1); i++) {
            specialChars[i] = (char) (32 + i);
        }
        for (int i = 0; i < (64 - 58 + 1); i++) {
            specialChars[offset1 + i] = (char) (58 + i);
        }
        for (int i = 0; i < (96 - 91 + 1); i++) {
            specialChars[offset2 + i] = (char) (91 + i);
        }
        for (int i = 0; i < (126 - 123 + 1); i++) {
            specialChars[offset3 + i] = (char) (123 + i);
        }
        sixtyfours = new char[64];
        int offset = 0;
        System.arraycopy(numerics, 0, sixtyfours, 0, numerics.length);
        System.arraycopy(uppers, 0, sixtyfours, offset + numerics.length, uppers.length);
        System.arraycopy(lowers, 0, sixtyfours, offset + uppers.length, lowers.length);
        sixtyfours[62] = SIXTYTWO;
        sixtyfours[63] = SIXTYTHREE;

        asciiTable = new String[128];
        for (int i = 0; i < 128; i++) {
            if (i < 32) {
                asciiTable[i] = ASCII_CONTROL_PART1_NAMES[i];
            } else if (i >= 32 && i < 127) {
                asciiTable[i] = String.valueOf(asciiPrintables[i - 32]);
            } else {
                asciiTable[i] = ASCII_CONTROL_PART2_NAMES[0];
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AsciiCodeViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new AsciiCodeViewer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanelAscii;
    private javax.swing.JRadioButton jRadioButtonAsciiBinary;
    private javax.swing.JRadioButton jRadioButtonAsciiDecimal;
    private javax.swing.JRadioButton jRadioButtonHexaDecimal;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JTable jTableAscii;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
